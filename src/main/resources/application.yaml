spring:
  config:
    import: optional:file:.env[.properties]
  application:
    name: demo1

  datasource:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update

    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

    show-sql: true

  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${GOOGLE_CLIENT_ID}
            clientSecret: ${GOOGLE_CLIENT_SECRET}
            scope: email, profile

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${SPRING_MAIL_USERNAME}
    password: ${SPRING_MAIL_PASSWORD}
    properties:
      mail:
        debug: false
        transport:
          protocol: smtp
        smtp:
          auth: true
          starttls:
            enable: true

  liquibase:
    enabled: true
    change-log: classpath:/db/changelog/changelog-master.yaml

  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: never
    properties.org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
#      org:
#        quartz:
#          scheduler:
#            instanceName: QuartzScheduler
#            instanceId: AUTO
#          jobStore:
#            class: org.quartz.impl.jdbcjobstore.JobStoreTX
#            driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
#            dataSource: quartzDataSource
#            tablePrefix: QRTZ_
#          threadPool:
#            threadCount: 10
#          datasource:
#            quartzDataSource:
#              driver: org.postgresql.Driver
#              URL: ${DATASOURCE_URL}
#              user: ${DATASOURCE_USERNAME}
#              password: ${DATASOURCE_PASSWORD}
telegram:
  bot:
    name: ${TELEGRAM_BOT_NAME}
    token: ${TELEGRAM_BOT_TOKEN}
job:
  toEmail: toEmail
  subject: subject
  body: body

  toUser: toUser
  message: message
